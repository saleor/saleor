diff --git a/saleor/checkout/complete_checkout.py b/saleor/checkout/complete_checkout.py
index 4681384efb..1ed6e56b61 100644
--- a/saleor/checkout/complete_checkout.py
+++ b/saleor/checkout/complete_checkout.py
@@ -78,6 +78,7 @@ from .fetch import (
     fetch_checkout_info,
     fetch_checkout_lines,
 )
+from .logs import log_suspicious_order_in_checkout_flow
 from .models import Checkout
 from .utils import (
     calculate_checkout_weight,
@@ -752,6 +753,13 @@ def _create_order(
         lambda: send_order_confirmation(order_info, checkout.redirect_url, manager)
     )

+    try:
+        log_suspicious_order_in_checkout_flow(
+            order, order_lines_info, checkout_info, logger
+        )
+    except Exception as e:
+        logger.warning("Error logging suspicious order: %s", e)
+
     return order


@@ -1389,6 +1397,14 @@ def _create_order_from_checkout(
         site_settings=site_settings,
         is_automatic_completion=is_automatic_completion,
     )
+
+    try:
+        log_suspicious_order_in_checkout_flow(
+            order, order_lines_info, checkout_info, logger
+        )
+    except Exception as e:
+        logger.warning("Error logging suspicious order: %s", e)
+
     return order


diff --git a/saleor/checkout/logs.py b/saleor/checkout/logs.py
new file mode 100644
index 0000000000..4e6d4179d3
--- /dev/null
+++ b/saleor/checkout/logs.py
@@ -0,0 +1,413 @@
+import os
+from decimal import Decimal
+
+import graphene
+from django.db.models import Sum
+
+from ..discount import VoucherType
+from ..discount.utils.shared import discount_info_for_logs
+from ..product.models import ProductVariantChannelListing
+from ..tests.utils import round_down
+
+DISABLE_EXTRA_LOGS = os.environ.get("DISABLE_EXTRA_LOGS", False)
+
+
+def log_suspicious_order_in_checkout_flow(
+    order, order_lines_info, checkout_info, logger
+):
+    if DISABLE_EXTRA_LOGS:
+        return
+
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+
+    # Check if order has 0 total
+    try:
+        if order.total_net_amount <= 0 or order.total_gross_amount <= 0:
+            log_order_with_zero_total(logger, order, order_lines_info, checkout_info)
+    except Exception as e:
+        logger.warning("Error logging order (%s) with zero total: %s", order_id, e)
+
+    # Run rest of the checks (shared between checkout and draft order flow)
+    run_order_price_checks(order, order_lines_info, logger)
+
+
+def run_order_price_checks(order, order_lines_info, logger):
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    issues = []
+    # Check if any order line has 0 total
+    try:
+        if any(
+            [
+                (order_line_info.line.total_price_net_amount <= 0)
+                or (order_line_info.line.total_price_gross_amount <= 0)
+                for order_line_info in order_lines_info
+            ]
+        ):
+            issues.append("Order with 0 line total price")
+    except Exception as e:
+        logger.warning(
+            "Error checking order (%s) with 0 line total price: %s", order_id, e
+        )
+
+    # Check if any order line is discounted more than 50%
+    try:
+        if any(
+            [
+                discount_over_50_check(order_line_info)
+                for order_line_info in order_lines_info
+            ]
+        ):
+            issues.append("Line discounted by more than half")
+    except Exception as e:
+        logger.warning(
+            "Error checking order (%s) with line discounted by more than half: %s",
+            order_id,
+            e,
+        )
+
+    # Check if all order lines have tax rate reflected in its net/gross prices
+    try:
+        if any([tax_line_check(line_info.line) for line_info in order_lines_info]):
+            issues.append("Line tax issue")
+    except Exception as e:
+        logger.warning("Error checking order (%s) with line tax issue: %s", order_id, e)
+
+    # Check if all order prices have the same tax rate
+    try:
+        if tax_order_check(order):
+            issues.append("Order tax issue")
+    except Exception as e:
+        logger.warning(
+            "Error checking order (%s) with order tax issue: %s", order_id, e
+        )
+
+    # Check if order total is a sum of lines total + shipping
+    try:
+        if order_total_check(order, order_lines_info):
+            issues.append("Order total does not match lines total and shipping")
+    except Exception as e:
+        logger.warning("Error checking order (%s) total: %s", order_id, e)
+
+    if issues:
+        issues_str = " | ".join(issues)
+        log_msg = "Suspicious order: %s. Issues detected: " + issues_str
+        log_order_with_suspicious_line(order, order_lines_info, logger, log_msg)
+
+
+def log_order_with_zero_total(
+    logger,
+    order,
+    order_lines_info,
+    checkout_info,
+):
+    order_id = graphene.Node.to_global_id("Order", order.id)
+    extra = {
+        "checkoutId": graphene.Node.to_global_id("Checkout", checkout_info.checkout.pk),
+        "orderId": order_id,
+    }
+    logger.warning("Order with zero total created: %s.", order_id, extra=extra)
+    voucher = checkout_info.voucher
+    gift_cards = order.gift_cards.all()
+    order_discounts = order.discounts.all()
+
+    shipping_price_net = order.shipping_price_net_amount
+    shipping_price_gross = order.shipping_price_gross_amount
+    not_valid_msg = "Not valid 0 total amount for order: %s."
+    not_valid = False
+    # shipping voucher reduces the shipping price,only gift cards can cover
+    # the shipping price without reducing it
+    if (shipping_price_net > 0 or shipping_price_gross > 0) and not gift_cards:
+        not_valid_msg += " Shipping price is greater than 0."
+        extra["shipping_price_net_amount"] = shipping_price_net
+        extra["shipping_price_gross_amount"] = shipping_price_gross
+        not_valid = True
+
+    # only voucher discount can reduce the shipping price
+    # entire order voucher and order promotions are not applied on the shipping price
+    if (
+        order.is_shipping_required()
+        and (shipping_price_net <= 0 or shipping_price_gross <= 0)
+        and order.undiscounted_base_shipping_price_amount > 0
+        and (not voucher or voucher.type != VoucherType.SHIPPING)
+    ):
+        not_valid_msg += " Shipping price is 0 for no reason."
+        extra["shipping_price_net_amount"] = shipping_price_net
+        extra["shipping_price_gross_amount"] = shipping_price_gross
+        extra["discounts"] = discount_info_for_logs(order_discounts)
+        not_valid = True
+
+    invalid_lines_above_0 = []
+    invalid_lines_0_price = []
+    line_discounts = []
+    # line price can be reduced by catalogue promotions, line vouchers, order voucher,
+    # order promotions
+    for line_info in order_lines_info:
+        line = line_info.line
+        line_total_price_net = line.total_price_net_amount
+        line_total_price_gross = line.total_price_gross_amount
+        # only gift cards can cover the line price without reducing it
+        if (line_total_price_net > 0 or line_total_price_gross > 0) and not gift_cards:
+            invalid_lines_above_0.append(line)
+        elif (
+            (line_total_price_net <= 0 or line_total_price_gross <= 0)
+            and line.undiscounted_total_price_net_amount > 0
+            and not voucher
+            and not order_discounts
+            and not line.is_price_overridden
+            and not line_info.line_discounts
+        ):
+            invalid_lines_0_price.append(line)
+
+        if line_info.line_discounts:
+            line_discounts.extend(line_info.line_discounts)
+
+    if invalid_lines_above_0:
+        not_valid_msg += " Lines with total price above 0."
+        extra["line_ids"] = [
+            graphene.Node.to_global_id("OrderLine", line.id)
+            for line in invalid_lines_above_0
+        ]
+        not_valid = True
+
+    if invalid_lines_0_price:
+        not_valid_msg += " Lines with total price 0 for no reason."
+        ids = [
+            graphene.Node.to_global_id("OrderLine", line.id)
+            for line in invalid_lines_0_price
+        ]
+        if "line_ids" in extra:
+            extra["line_ids"].extend(ids)
+        else:
+            extra["line_ids"] = ids
+        not_valid = True
+
+    gift_card_balance = gift_cards.aggregate(Sum("initial_balance_amount"))[
+        "initial_balance_amount__sum"
+    ]
+    # Order total from lines should have included all discounts;
+    # line discounts: catalogue promotion, line vouchers
+    # order discounts: entire order voucher, order promotion
+    order_subtotal_from_lines = sum(
+        line_info.line.total_price_gross_amount for line_info in order_lines_info
+    )
+    order_total_from_lines = order_subtotal_from_lines + shipping_price_gross
+    if gift_cards and gift_card_balance < order_total_from_lines:
+        not_valid_msg += " Existing gift cards not covers whole order."
+        not_valid = True
+
+    if not gift_cards:
+        order_discounts_sum = sum(
+            [discount.amount_value for discount in order_discounts], Decimal(0)
+        )
+        line_discounts_sum = sum(
+            [discount.amount_value for discount in line_discounts], Decimal(0)
+        )
+        if (
+            order_discounts_sum + line_discounts_sum
+            < order.undiscounted_total_net_amount
+        ):
+            not_valid_msg += " Discounts do not cover total price."
+            not_valid = True
+            extra["order_discounts"] = discount_info_for_logs(order_discounts)
+            extra["line_discounts"] = discount_info_for_logs(line_discounts)
+
+    if not_valid:
+        logger.error(
+            not_valid_msg,
+            order_id,
+            extra=extra,
+        )
+
+
+def log_order_with_suspicious_line(order, lines_info, logger, log_msg):
+    order_id = graphene.Node.to_global_id("Order", order.id)
+
+    variant_listings_data = ProductVariantChannelListing.objects.filter(
+        variant_id__in=[line_info.line.variant_id for line_info in lines_info],
+        channel_id=order.channel_id,
+    ).values(
+        "variant_id",
+        "price_amount",
+        "discounted_price_amount",
+    )
+    variant_listings = {
+        variant["variant_id"]: (
+            variant["price_amount"],
+            variant["discounted_price_amount"],
+        )
+        for variant in variant_listings_data
+    }
+    extra = {
+        "order_id": order_id,
+        "orderId": order_id,
+        "order": {
+            "currency": order.currency,
+            "status": order.status,
+            "origin": order.origin,
+            "checkout_id": order.checkout_token,
+            "undiscounted_base_shipping_price_amount": order.undiscounted_base_shipping_price_amount,
+            "base_shipping_price_amount": order.base_shipping_price_amount,
+            "shipping_price_net_amount": order.shipping_price_net_amount,
+            "shipping_price_gross_amount": order.shipping_price_gross_amount,
+            "undiscounted_total_net_amount": order.undiscounted_total_net_amount,
+            "total_net_amount": order.total_net_amount,
+            "undiscounted_total_gross_amount": order.undiscounted_total_gross_amount,
+            "total_gross_amount": order.total_gross_amount,
+            "subtotal_net_amount": order.subtotal_net_amount,
+            "subtotal_gross_amount": order.subtotal_gross_amount,
+            "has_voucher_code": bool(order.voucher_code),
+            "tax_exemption": order.tax_exemption,
+            "tax_error": order.tax_error,
+        },
+        "discounts": discount_info_for_logs(order.discounts.all()),
+        "lines": [
+            {
+                "id": graphene.Node.to_global_id("OrderLine", line_info.line.pk),
+                "variant_id": graphene.Node.to_global_id(
+                    "ProductVariant", line_info.line.variant_id
+                ),
+                "quantity": line_info.line.quantity,
+                "is_gift_card": line_info.line.is_gift_card,
+                "is_price_overridden": line_info.line.is_price_overridden,
+                "undiscounted_base_unit_price_amount": line_info.line.undiscounted_base_unit_price_amount,
+                "base_unit_price_amount": line_info.line.base_unit_price_amount,
+                "undiscounted_unit_price_net_amount": line_info.line.undiscounted_unit_price_net_amount,
+                "undiscounted_unit_price_gross_amount": line_info.line.undiscounted_unit_price_gross_amount,
+                "unit_price_net_amount": line_info.line.unit_price_net_amount,
+                "unit_price_gross_amount": line_info.line.unit_price_gross_amount,
+                "undiscounted_total_price_net_amount": line_info.line.undiscounted_total_price_net_amount,
+                "undiscounted_total_price_gross_amount": line_info.line.undiscounted_total_price_gross_amount,
+                "total_price_net_amount": line_info.line.total_price_net_amount,
+                "total_price_gross_amount": line_info.line.total_price_gross_amount,
+                "has_voucher_code": bool(line_info.line.voucher_code),
+                "variant_listing_price": (
+                    variant_listings[line_info.line.variant_id][0]
+                    if line_info.line.variant_id in variant_listings
+                    else None
+                ),
+                "variant_listing_discounted_price": (
+                    variant_listings[line_info.line.variant_id][1]
+                    if line_info.line.variant_id in variant_listings
+                    else None
+                ),
+                "unit_discount_amount": line_info.line.unit_discount_amount,
+                "unit_discount_type": line_info.line.unit_discount_type,
+                "unit_discount_reason": line_info.line.unit_discount_reason,
+                "discounts": discount_info_for_logs(line_info.line_discounts)
+                if line_info.line_discounts
+                else None,
+            }
+            for line_info in lines_info
+        ],
+    }
+    logger.warning(
+        log_msg,
+        order_id,
+        extra=extra,
+    )
+
+
+def discount_over_50_check(order_line_info):
+    """Check if any line is discounted by more then 50%."""
+    if order_line_info.line.total_price_net_amount < round_down(
+        order_line_info.line.undiscounted_total_price_net_amount / 2
+    ):
+        return True
+    if order_line_info.line.total_price_gross_amount < round_down(
+        order_line_info.line.undiscounted_total_price_gross_amount / 2
+    ):
+        return True
+
+
+def tax_line_check(line):
+    """Check if tax rate is reflected in net/gross prices."""
+    tax_rate = line.tax_rate + 1
+    total_tax_rate = (
+        round(line.total_price_gross_amount / line.total_price_net_amount, 2)
+        if line.total_price_net_amount
+        else tax_rate
+    )
+    undiscounted_total_tax_rate = (
+        round(
+            line.undiscounted_total_price_gross_amount
+            / line.undiscounted_total_price_net_amount,
+            2,
+        )
+        if line.undiscounted_total_price_net_amount
+        else tax_rate
+    )
+    unit_tax_rate = (
+        round(line.unit_price_gross_amount / line.unit_price_net_amount, 2)
+        if line.unit_price_net_amount
+        else tax_rate
+    )
+    undiscounted_unit_tax_rate = (
+        round(
+            line.undiscounted_unit_price_gross_amount
+            / line.undiscounted_unit_price_net_amount,
+            2,
+        )
+        if line.undiscounted_unit_price_net_amount
+        else tax_rate
+    )
+    for rate in [
+        total_tax_rate,
+        undiscounted_total_tax_rate,
+        unit_tax_rate,
+        undiscounted_unit_tax_rate,
+    ]:
+        if confidence_check(rate - tax_rate):
+            return True
+
+
+def tax_order_check(order):
+    """Check if all prices have the same tax rate."""
+    total_tax_rate = (
+        round(order.total_gross_amount / order.total_net_amount, 2)
+        if order.total_net_amount
+        else 1
+    )
+    subtotal_tax_rate = (
+        round(order.subtotal_gross_amount / order.subtotal_net_amount, 2)
+        if order.subtotal_net_amount
+        else total_tax_rate
+    )
+    undiscounted_total_tax_rate = (
+        round(
+            order.undiscounted_total_gross_amount / order.undiscounted_total_net_amount,
+            2,
+        )
+        if order.undiscounted_total_net_amount
+        else total_tax_rate
+    )
+    shipping_tax_rate = (
+        round(order.shipping_price_gross_amount / order.shipping_price_net_amount, 2)
+        if order.shipping_price_net_amount
+        else total_tax_rate
+    )
+    for rate in [subtotal_tax_rate, undiscounted_total_tax_rate, shipping_tax_rate]:
+        if confidence_check(rate - total_tax_rate):
+            return True
+
+
+def order_total_check(order, order_lines_info):
+    """Check if order total is a sum of lines total + shipping."""
+    order_total_net = order.total_net_amount
+    subtotal_net = sum(
+        [line_info.line.total_price_net_amount for line_info in order_lines_info]
+    )
+    shipping_net = order.shipping_price_net_amount
+    if confidence_check(order_total_net - subtotal_net - shipping_net):
+        return True
+
+    order_total_gross = order.total_gross_amount
+    subtotal_gross = sum(
+        [line_info.line.total_price_gross_amount for line_info in order_lines_info]
+    )
+    shipping_gross = order.shipping_price_gross_amount
+    if confidence_check(order_total_gross - subtotal_gross - shipping_gross):
+        return True
+
+
+def confidence_check(value):
+    return abs(value) > 0.01
diff --git a/saleor/checkout/tests/test_logs.py b/saleor/checkout/tests/test_logs.py
new file mode 100644
index 0000000000..dda341d5f0
--- /dev/null
+++ b/saleor/checkout/tests/test_logs.py
@@ -0,0 +1,917 @@
+from decimal import Decimal
+from unittest import mock
+
+import graphene
+import pytest
+from prices import TaxedMoney
+
+from ...core.taxes import zero_money
+from ...discount import DiscountValueType
+from ...order.fetch import OrderLineInfo
+from ...plugins.manager import get_plugins_manager
+from ..complete_checkout import (
+    _create_order,
+    _create_order_from_checkout,
+    _prepare_order_data,
+    logger,
+)
+from ..fetch import fetch_checkout_info, fetch_checkout_lines
+from ..logs import log_order_with_zero_total, log_suspicious_order_in_checkout_flow
+
+
+@pytest.fixture
+def order_with_item_total_0(
+    order_generator, order_lines_generator, product_list, shipping_zone
+):
+    order = order_generator()
+    variant = product_list[0].variants.first()
+
+    order_lines_generator(
+        order,
+        [variant],
+        [0],
+        [2],
+    )
+
+    order.shipping_address = order.billing_address.get_copy()
+    shipping_method = shipping_zone.shipping_methods.first()
+    order.shipping_method_name = shipping_method.name
+    order.shipping_method = shipping_method
+    order.shipping_tax_class = shipping_method.tax_class
+    order.shipping_tax_class_name = shipping_method.tax_class.name
+    order.shipping_tax_class_metadata = shipping_method.tax_class.metadata
+    order.shipping_tax_class_private_metadata = (
+        shipping_method.tax_class.private_metadata
+    )  # noqa: E501
+
+    zero = zero_money(order.currency)
+    order.shipping_price = TaxedMoney(net=zero, gross=zero)
+    order.base_shipping_price = zero
+    order.undiscounted_base_shipping_price = zero
+    order.shipping_tax_rate = Decimal("0")
+    order.total_gross_amount = Decimal("0")
+    order.total_net_amount = Decimal("0")
+    order.save()
+
+    return order
+
+
+def test_log_order_with_zero_total_valid_scenario(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == graphene.Node.to_global_id(
+        "Checkout", checkout.pk
+    )
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_shipping_above_0_no_gift_cards(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("10")
+    order.shipping_price_net_amount = Decimal("10")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Shipping price is greater than 0."
+    )
+
+
+def test_log_order_with_zero_total_shipping_above_0_gift_cards(
+    order_with_item_total_0, gift_card, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    gift_card.initial_balance_amount = 100
+    gift_card.current_balance_amount = 100
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    order.shipping_price_gross_amount = Decimal("10")
+    order.shipping_price_net_amount = Decimal("10")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_shipping_zero_no_reason(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.undiscounted_base_shipping_price_amount = Decimal("5")
+    order.save(
+        update_fields=[
+            "shipping_price_gross_amount",
+            "shipping_price_net_amount",
+            "undiscounted_base_shipping_price_amount",
+        ]
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Shipping price is 0 for no reason."
+    )
+
+
+def test_log_order_with_zero_total_valid_shipping_zero(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_valid_shipping_zero_voucher(
+    order_with_item_total_0, checkout, caplog, voucher_free_shipping
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    code = voucher_free_shipping.codes.first()
+    order.voucher_code = code.code
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.undiscounted_base_shipping_price_amount = Decimal("5")
+    order.save(
+        update_fields=[
+            "shipping_price_gross_amount",
+            "shipping_price_net_amount",
+            "undiscounted_base_shipping_price_amount",
+            "voucher_code",
+        ]
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+    checkout_info.voucher = voucher_free_shipping
+    checkout_info.voucher_code = code
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_line_above_0_no_gift_cards(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Lines with total price above 0."
+    )
+    assert caplog.records[1].line_ids
+
+
+def test_log_order_with_zero_total_line_above_0_gift_cards(
+    order_with_item_total_0, checkout, gift_card, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    gift_card.initial_balance_amount = 100
+    gift_card.current_balance_amount = 100
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_not_valid_line_total_zero(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Lines with total price 0 for no reason."
+    )
+    assert caplog.records[1].line_ids
+
+
+def test_log_order_with_zero_total_valid_line_total_zero_voucher(
+    order_with_item_total_0, checkout, caplog, voucher_percentage
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    code = voucher_percentage.codes.first()
+    order.voucher_code = code.code
+    order.save(update_fields=["voucher_code"])
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+    checkout_info.voucher = voucher_percentage
+    checkout_info.voucher_code = code
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_valid_line_total_zero_price_overriden(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.is_price_overridden = True
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+def test_log_order_with_zero_total_gift_cards_not_cover_whole_total(
+    order_with_item_total_0, checkout, gift_card, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    gift_card.initial_balance_amount = Decimal("5")
+    gift_card.current_balance_amount = Decimal("5")
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Existing gift cards not covers whole order."
+    )
+
+
+def test_log_order_with_zero_total_discounts_not_cover_full_total(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.undiscounted_total_net_amount = Decimal("10")
+    order.undiscounted_total_gross_amount = Decimal("10")
+    order.save(
+        update_fields=[
+            "undiscounted_total_net_amount",
+            "undiscounted_total_gross_amount",
+        ]
+    )
+
+    order.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("2"),
+        amount_value=Decimal("2"),
+    )
+    line.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("3"),
+        amount_value=Decimal("3"),
+    )
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for order: {order_id}. Discounts do not cover total price."
+    )
+
+
+def test_log_order_with_zero_total_discounts_cover_full_total(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.undiscounted_total_net_amount = Decimal("10")
+    order.undiscounted_total_gross_amount = Decimal("10")
+    order.save(
+        update_fields=[
+            "undiscounted_total_net_amount",
+            "undiscounted_total_gross_amount",
+        ]
+    )
+
+    order.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("7"),
+        amount_value=Decimal("7"),
+    )
+    line_discount = line.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("3"),
+        amount_value=Decimal("3"),
+    )
+    lines_info.line_discounts = [line_discount]
+
+    checkout_info = fetch_checkout_info(
+        checkout, [], get_plugins_manager(allow_replica=False)
+    )
+
+    # when
+    log_order_with_zero_total(logger, order, [lines_info], checkout_info)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    checkout_id = graphene.Node.to_global_id("Checkout", checkout.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].checkoutId == checkout_id
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].message == f"Order with zero total created: {order_id}."
+
+
+@mock.patch("saleor.checkout.complete_checkout.log_suspicious_order")
+def test_failing_logging_in_create_order_from_checkout(
+    mocked_logging, checkout, caplog
+):
+    # given
+    err_msg = "Test error"
+    mocked_logging.side_effect = ValueError(err_msg)
+    manager = get_plugins_manager(allow_replica=False)
+    lines_info, _ = fetch_checkout_lines(
+        checkout,
+    )
+    checkout_info = fetch_checkout_info(
+        checkout,
+        lines_info,
+        manager,
+    )
+
+    # when
+    order = _create_order_from_checkout(checkout_info, lines_info, manager, None, None)
+
+    # then
+    assert order
+    assert f"Error logging suspicious order: {err_msg}" in [
+        record.message for record in caplog.records
+    ]
+
+
+@mock.patch("saleor.checkout.complete_checkout.log_suspicious_order")
+def test_failing_logging_in_create_order(
+    mocked_logging, checkout, customer_user, caplog
+):
+    # given
+    err_msg = "Test error"
+    mocked_logging.side_effect = ValueError(err_msg)
+    manager = get_plugins_manager(allow_replica=False)
+    lines_info, _ = fetch_checkout_lines(
+        checkout,
+    )
+    checkout_info = fetch_checkout_info(
+        checkout,
+        lines_info,
+        manager,
+    )
+
+    # when
+    order = _create_order(
+        checkout_info=checkout_info,
+        checkout_lines=lines_info,
+        order_data=_prepare_order_data(
+            manager=manager,
+            checkout_info=checkout_info,
+            lines=lines_info,
+            prices_entered_with_tax=True,
+        ),
+        user=customer_user,
+        app=None,
+        manager=manager,
+    )
+
+    # then
+    assert order
+    assert f"Error logging suspicious order: {err_msg}" in [
+        record.message for record in caplog.records
+    ]
+
+
+def test_log_order_with_0_line_price(
+    order_with_item_total_0, voucher_percentage, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+
+    code = voucher_percentage.codes.first()
+    order.voucher_code = code.code
+    order.total_gross_amount = Decimal("10")
+    order.total_net_amount = Decimal("10")
+    order.save(update_fields=["voucher_code", "total_gross_amount", "total_net_amount"])
+
+    order.discounts.create(
+        value_type=DiscountValueType.PERCENTAGE,
+        value=Decimal("100"),
+        amount_value=Decimal("100"),
+        voucher=voucher_percentage,
+    )
+
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    manager = get_plugins_manager(allow_replica=False)
+    checkout_lines_info, _ = fetch_checkout_lines(
+        checkout,
+    )
+    checkout_info = fetch_checkout_info(
+        checkout,
+        checkout_lines_info,
+        manager,
+    )
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, [lines_info], checkout_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].discounts
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order with 0 line total price" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_discount_higher_than_50_percent(
+    order_with_item_total_0, checkout, caplog
+):
+    # given
+    order = order_with_item_total_0
+
+    order.total_gross_amount = Decimal("10")
+    order.total_net_amount = Decimal("10")
+    order.save(update_fields=["total_gross_amount", "total_net_amount"])
+
+    line = order.lines.first()
+    line.total_price_net_amount = Decimal("2")
+    line.total_price_gross_amount = Decimal("2")
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.undiscounted_total_price_gross_amount = Decimal("10")
+    line.save(
+        update_fields=[
+            "undiscounted_unit_price_net_amount",
+            "undiscounted_unit_price_gross_amount",
+            "total_price_net_amount",
+            "total_price_gross_amount",
+        ]
+    )
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    manager = get_plugins_manager(allow_replica=False)
+    checkout_lines_info, _ = fetch_checkout_lines(
+        checkout,
+    )
+    checkout_info = fetch_checkout_info(
+        checkout,
+        checkout_lines_info,
+        manager,
+    )
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, [lines_info], checkout_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Line discounted by more than half" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_line_tax_issue(order_with_lines, checkout_info, caplog):
+    # given
+    order = order_with_lines
+
+    line = order.lines.first()
+    line.undiscounted_total_price_gross_amount += Decimal("1")
+    line.save(update_fields=["undiscounted_total_price_gross_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, lines_info, checkout_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Line tax issue" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_tax_issue(order_with_lines, checkout_info, caplog):
+    # given
+    order = order_with_lines
+    order.shipping_price_gross_amount += Decimal("1")
+    order.save(update_fields=["shipping_price_gross_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, lines_info, checkout_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order tax issue" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_incorrect_total(order_with_lines, checkout_info, caplog):
+    # given
+    order = order_with_lines
+    line = order.lines.first()
+    line.total_price_net_amount += Decimal("1")
+    line.save(update_fields=["total_price_net_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, lines_info, checkout_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order total does not match lines total and shipping" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_no_logs_for_correct_order(order_with_lines, checkout_info, caplog):
+    # given
+    order = order_with_lines
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_checkout_flow(order, lines_info, checkout_info, logger)
+
+    # then
+    assert not caplog.records
diff --git a/saleor/graphql/order/mutations/draft_order_complete.py b/saleor/graphql/order/mutations/draft_order_complete.py
index 773e63b334..526c71e373 100644
--- a/saleor/graphql/order/mutations/draft_order_complete.py
+++ b/saleor/graphql/order/mutations/draft_order_complete.py
@@ -1,3 +1,4 @@
+import logging
 from typing import cast

 import graphene
@@ -16,6 +17,7 @@ from ....order.actions import order_created
 from ....order.calculations import fetch_order_prices_if_expired
 from ....order.error_codes import OrderErrorCode
 from ....order.fetch import OrderInfo, OrderLineInfo
+from ....order.logs import log_suspicious_order_in_draft_order_flow
 from ....order.search import prepare_order_search_vector_value
 from ....order.utils import get_order_country, update_order_display_gross_prices
 from ....permission.enums import OrderPermissions
@@ -34,6 +36,8 @@ from ..utils import (
     validate_draft_order,
 )

+logger = logging.getLogger(__name__)
+

 class DraftOrderComplete(BaseMutation):
     order = graphene.Field(Order, description="Completed order.")
@@ -185,4 +189,10 @@ class DraftOrderComplete(BaseMutation):
                     from_draft=True,
                 )
             )
+
+        try:
+            log_suspicious_order_in_draft_order_flow(order, order_lines_info, logger)
+        except Exception as e:
+            logger.warning("Error logging suspicious order: %s", e)
+
         return DraftOrderComplete(order=order)
diff --git a/saleor/order/logs.py b/saleor/order/logs.py
new file mode 100644
index 0000000000..ab432e5bab
--- /dev/null
+++ b/saleor/order/logs.py
@@ -0,0 +1,151 @@
+import os
+from decimal import Decimal
+
+import graphene
+from django.db.models import Sum
+
+from ..checkout.logs import run_order_price_checks
+from ..discount import DiscountType
+from ..discount.utils.shared import discount_info_for_logs
+
+DISABLE_EXTRA_LOGS = os.environ.get("DISABLE_EXTRA_LOGS", False)
+
+
+def log_suspicious_order_in_draft_order_flow(order, order_lines_info, logger):
+    if DISABLE_EXTRA_LOGS:
+        return
+
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+
+    # Check if order has 0 total
+    try:
+        if order.total_net_amount <= 0 or order.total_gross_amount <= 0:
+            log_draft_order_complete_with_zero_total(order, order_lines_info, logger)
+    except Exception as e:
+        logger.warning("Error logging order (%s) with zero total: %s", order_id, e)
+
+    # Run rest of the checks (shared between checkout and draft order flow)
+    run_order_price_checks(order, order_lines_info, logger)
+
+
+def log_draft_order_complete_with_zero_total(order, order_lines_info, logger):
+    extra = {
+        "orderId": graphene.Node.to_global_id("Order", order.id),
+    }
+    order_id = graphene.Node.to_global_id("Order", order.id)
+    logger.warning("Draft Order with zero total completed: %s.", order_id, extra=extra)
+    voucher_code = order.voucher_code
+    gift_cards = order.gift_cards.all()
+    order_discounts = order.discounts.all()
+    manual_order_discount = [
+        discount for discount in order_discounts if discount.type == DiscountType.MANUAL
+    ]
+
+    shipping_price_net = order.shipping_price_net_amount
+    shipping_price_gross = order.shipping_price_gross_amount
+    not_valid_msg = "Not valid 0 total amount for draft order completion: %s."
+    not_valid = False
+    # shipping voucher and manual discounts reduces the shipping price
+    # so only gift cards can cover the shipping price
+    if (shipping_price_net > 0 or shipping_price_gross > 0) and not gift_cards:
+        not_valid_msg += " Shipping price is greater than 0."
+        extra["shipping_price_net_amount"] = shipping_price_net
+        extra["shipping_price_gross_amount"] = shipping_price_gross
+        not_valid = True
+
+    # only voucher and manual discount can reduce the shipping price
+    # entire order voucher and order promotions are not applied on the shipping price
+    if (
+        order.is_shipping_required()
+        and (shipping_price_net <= 0 or shipping_price_gross <= 0)
+        and order.undiscounted_base_shipping_price_amount > 0
+        and not voucher_code
+        and not manual_order_discount
+    ):
+        not_valid_msg += " Shipping price is 0 for no reason."
+        extra["shipping_price_net_amount"] = shipping_price_net
+        extra["shipping_price_gross_amount"] = shipping_price_gross
+        extra["discounts"] = discount_info_for_logs(order_discounts)
+        not_valid = True
+
+    invalid_lines_above_0 = []
+    invalid_lines_0_price = []
+    line_discounts = []
+    # line price can be reduced by catalogue promotions, line manual discount,
+    # line vouchers, order voucher,order promotions
+    for line_info in order_lines_info:
+        line = line_info.line
+        line_total_price_net = line.total_price_net_amount
+        line_total_price_gross = line.total_price_gross_amount
+        # only gift cards can cover the line price without reducing it
+        if (line_total_price_net > 0 or line_total_price_gross > 0) and not gift_cards:
+            invalid_lines_above_0.append(line)
+        elif (
+            (line_total_price_net <= 0 or line_total_price_gross <= 0)
+            and line.undiscounted_total_price_net_amount > 0
+            and not voucher_code
+            and not gift_cards
+            and not order_discounts
+            and not line.is_price_overridden
+            and not line_info.line_discounts
+        ):
+            invalid_lines_0_price.append(line)
+
+        if line_info.line_discounts:
+            line_discounts.extend(line_info.line_discounts)
+
+    if invalid_lines_above_0:
+        not_valid_msg += " Lines with total price above 0."
+        extra["line_ids"] = [
+            graphene.Node.to_global_id("OrderLine", line.id)
+            for line in invalid_lines_above_0
+        ]
+        not_valid = True
+
+    if invalid_lines_0_price:
+        not_valid_msg += " Lines with total price 0 for no reason."
+        ids = [
+            graphene.Node.to_global_id("OrderLine", line.id)
+            for line in invalid_lines_0_price
+        ]
+        if "line_ids" in extra:
+            extra["line_ids"].extend(ids)
+        else:
+            extra["line_ids"] = ids
+        not_valid = True
+
+    gift_card_balance = gift_cards.aggregate(Sum("initial_balance_amount"))[
+        "initial_balance_amount__sum"
+    ]
+    # Order total from lines should have included all discounts;
+    # line discounts: catalogue promotion, line vouchers
+    # order discounts: entire order voucher, order promotion
+    order_total_from_lines = sum(
+        line_info.line.total_price_net_amount for line_info in order_lines_info
+    )
+    if gift_cards and gift_card_balance < order_total_from_lines:
+        not_valid_msg += " Existing gift cards not covers whole order."
+        not_valid = True
+
+    if not gift_cards:
+        order_discounts_sum = sum(
+            [discount.amount_value for discount in order_discounts], Decimal(0)
+        )
+        line_discounts_sum = sum(
+            [discount.amount_value for discount in line_discounts], Decimal(0)
+        )
+        if (
+            order_discounts_sum + line_discounts_sum
+            < order.undiscounted_total_net_amount
+        ):
+            not_valid_msg += " Discounts do not cover total price."
+            not_valid = True
+            extra["order_discounts"] = discount_info_for_logs(order_discounts)
+            extra["line_discounts"] = discount_info_for_logs(line_discounts)
+
+    if not_valid:
+        logger.error(
+            not_valid_msg,
+            order_id,
+            extra=extra,
+        )
diff --git a/saleor/order/tests/test_logs.py b/saleor/order/tests/test_logs.py
new file mode 100644
index 0000000000..01ced9ec0f
--- /dev/null
+++ b/saleor/order/tests/test_logs.py
@@ -0,0 +1,822 @@
+import logging
+from decimal import Decimal
+from unittest import mock
+
+import graphene
+import pytest
+from prices import TaxedMoney
+
+from ...core.taxes import zero_money
+from ...discount import DiscountValueType
+from ...graphql.order.tests.mutations.test_draft_order_complete import (
+    DRAFT_ORDER_COMPLETE_MUTATION,
+)
+from ...graphql.tests.utils import get_graphql_content
+from .. import OrderStatus
+from ..fetch import OrderLineInfo
+from ..logs import (
+    log_draft_order_complete_with_zero_total,
+    log_suspicious_order_in_draft_order_flow,
+)
+
+logger = logging.getLogger(__name__)
+
+
+@pytest.fixture
+def order_with_item_total_0(
+    order_generator, order_lines_generator, product_list, shipping_zone
+):
+    order = order_generator()
+    variant = product_list[0].variants.first()
+
+    order_lines_generator(
+        order,
+        [variant],
+        [0],
+        [2],
+    )
+
+    order.shipping_address = order.billing_address.get_copy()
+    shipping_method = shipping_zone.shipping_methods.first()
+    order.shipping_method_name = shipping_method.name
+    order.shipping_method = shipping_method
+    order.shipping_tax_class = shipping_method.tax_class
+    order.shipping_tax_class_name = shipping_method.tax_class.name
+    order.shipping_tax_class_metadata = shipping_method.tax_class.metadata
+    order.shipping_tax_class_private_metadata = (
+        shipping_method.tax_class.private_metadata
+    )  # noqa: E501
+
+    zero = zero_money(order.currency)
+    order.shipping_price = TaxedMoney(net=zero, gross=zero)
+    order.base_shipping_price = zero
+    order.undiscounted_base_shipping_price = zero
+    order.shipping_tax_rate = Decimal("0")
+    order.total_gross_amount = Decimal("0")
+    order.total_net_amount = Decimal("0")
+    order.save()
+
+    return order
+
+
+def test_log_draft_order_complete_with_zero_total_valid_scenario(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_shipping_above_0_no_gift_cards(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("10")
+    order.shipping_price_net_amount = Decimal("10")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Shipping price is greater than 0."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_shipping_above_0_gift_cards(
+    order_with_item_total_0, gift_card, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    gift_card.initial_balance_amount = 100
+    gift_card.current_balance_amount = 100
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    order.shipping_price_gross_amount = Decimal("10")
+    order.shipping_price_net_amount = Decimal("10")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_shipping_zero_no_reason(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.undiscounted_base_shipping_price_amount = Decimal("5")
+    order.save(
+        update_fields=[
+            "shipping_price_gross_amount",
+            "shipping_price_net_amount",
+            "undiscounted_base_shipping_price_amount",
+        ]
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Shipping price is 0 for no reason."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_valid_shipping_zero(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.save(
+        update_fields=["shipping_price_gross_amount", "shipping_price_net_amount"]
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_valid_shipping_zero_voucher(
+    order_with_item_total_0, caplog, voucher_free_shipping
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    code = voucher_free_shipping.codes.first()
+    order.voucher_code = code.code
+    order.shipping_price_gross_amount = Decimal("0")
+    order.shipping_price_net_amount = Decimal("0")
+    order.undiscounted_base_shipping_price_amount = Decimal("5")
+    order.save(
+        update_fields=[
+            "shipping_price_gross_amount",
+            "shipping_price_net_amount",
+            "undiscounted_base_shipping_price_amount",
+            "voucher_code",
+        ]
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_line_above_0_no_gift_cards(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Lines with total price above 0."
+    )
+    assert caplog.records[1].line_ids
+
+
+def test_log_draft_order_complete_with_zero_total_line_above_0_gift_cards(
+    order_with_item_total_0, gift_card, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    gift_card.initial_balance_amount = 100
+    gift_card.current_balance_amount = 100
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_not_valid_line_total_zero(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Lines with total price 0 for no reason."
+    )
+    assert caplog.records[1].line_ids
+
+
+def test_log_draft_order_complete_with_zero_total_valid_line_total_zero_voucher(
+    order_with_item_total_0, caplog, voucher_percentage
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    code = voucher_percentage.codes.first()
+    order.voucher_code = code.code
+    order.save(update_fields=["voucher_code"])
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_valid_line_total_zero_price_overriden(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.is_price_overridden = True
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.save(update_fields=["undiscounted_total_price_net_amount"])
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_gift_cards_not_cover_whole_total(
+    order_with_item_total_0, gift_card, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    line.total_price_gross_amount = Decimal("10")
+    line.total_price_net_amount = Decimal("10")
+    line.save(update_fields=["total_price_gross_amount", "total_price_net_amount"])
+
+    gift_card.initial_balance_amount = Decimal("5")
+    gift_card.current_balance_amount = Decimal("5")
+    gift_card.save(update_fields=["current_balance_amount", "initial_balance_amount"])
+
+    order.gift_cards.add(gift_card)
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Existing gift cards not covers whole order."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_discounts_not_cover_full_total(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.undiscounted_total_net_amount = Decimal("10")
+    order.undiscounted_total_gross_amount = Decimal("10")
+    order.save(
+        update_fields=[
+            "undiscounted_total_net_amount",
+            "undiscounted_total_gross_amount",
+        ]
+    )
+
+    order.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("2"),
+        amount_value=Decimal("2"),
+    )
+    line.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("3"),
+        amount_value=Decimal("3"),
+    )
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 2
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+    assert (
+        caplog.records[1].message
+        == f"Not valid 0 total amount for draft order completion: {order_id}. Discounts do not cover total price."
+    )
+
+
+def test_log_draft_order_complete_with_zero_total_discounts_cover_full_total(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    order.undiscounted_total_net_amount = Decimal("10")
+    order.undiscounted_total_gross_amount = Decimal("10")
+    order.save(
+        update_fields=[
+            "undiscounted_total_net_amount",
+            "undiscounted_total_gross_amount",
+        ]
+    )
+
+    order.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("7"),
+        amount_value=Decimal("7"),
+    )
+    line_discount = line.discounts.create(
+        value_type=DiscountValueType.FIXED,
+        value=Decimal("3"),
+        amount_value=Decimal("3"),
+    )
+    lines_info.line_discounts = [line_discount]
+
+    # when
+    log_draft_order_complete_with_zero_total(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert (
+        caplog.records[0].message
+        == f"Draft Order with zero total completed: {order_id}."
+    )
+
+
+@mock.patch(
+    "saleor.graphql.order.mutations.draft_order_complete.log_suspicious_order_in_draft_order_flow"
+)
+def test_failing_logs_in_draft_order_complete(
+    mocked_logging,
+    staff_api_client,
+    permission_group_manage_orders,
+    order_with_item_total_0,
+    caplog,
+):
+    # given
+    order = order_with_item_total_0
+    order.status = OrderStatus.DRAFT
+    order.save(update_fields=["status"])
+
+    permission_group_manage_orders.user_set.add(staff_api_client.user)
+
+    err_msg = "Test error"
+    mocked_logging.side_effect = ValueError(err_msg)
+
+    order_id = graphene.Node.to_global_id("Order", order.id)
+    variables = {"id": order_id}
+
+    # when
+    response = staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, variables)
+
+    # then
+    content = get_graphql_content(response)
+    data = content["data"]["draftOrderComplete"]
+    assert data["order"]
+    assert f"Error logging suspicious order: {err_msg}" in [
+        record.message for record in caplog.records
+    ]
+
+
+def test_log_order_with_0_line_price(
+    order_with_item_total_0, voucher_percentage, caplog
+):
+    # given
+    order = order_with_item_total_0
+
+    code = voucher_percentage.codes.first()
+    order.voucher_code = code.code
+    order.total_gross_amount = Decimal("10")
+    order.total_net_amount = Decimal("10")
+    order.save(update_fields=["voucher_code", "total_gross_amount", "total_net_amount"])
+
+    order.discounts.create(
+        value_type=DiscountValueType.PERCENTAGE,
+        value=Decimal("100"),
+        amount_value=Decimal("100"),
+        voucher=voucher_percentage,
+    )
+
+    line = order.lines.first()
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].discounts
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order with 0 line total price" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_discount_higher_than_50_percent(
+    order_with_item_total_0, caplog
+):
+    # given
+    order = order_with_item_total_0
+
+    order.total_gross_amount = Decimal("10")
+    order.total_net_amount = Decimal("10")
+    order.save(update_fields=["total_gross_amount", "total_net_amount"])
+
+    line = order.lines.first()
+    line.total_price_net_amount = Decimal("2")
+    line.total_price_gross_amount = Decimal("2")
+    line.undiscounted_total_price_net_amount = Decimal("10")
+    line.undiscounted_total_price_gross_amount = Decimal("10")
+    line.save(
+        update_fields=[
+            "undiscounted_unit_price_net_amount",
+            "undiscounted_unit_price_gross_amount",
+            "total_price_net_amount",
+            "total_price_gross_amount",
+        ]
+    )
+    lines_info = OrderLineInfo(
+        line=line,
+        quantity=line.quantity,
+        variant=line.variant,
+        warehouse_pk=line.allocations.first().stock.warehouse.pk,
+    )
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, [lines_info], logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Line discounted by more than half" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_line_tax_issue(order_with_lines, caplog):
+    # given
+    order = order_with_lines
+
+    line = order.lines.first()
+    line.undiscounted_total_price_gross_amount += Decimal("1")
+    line.save(update_fields=["undiscounted_total_price_gross_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, lines_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Line tax issue" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_tax_issue(order_with_lines, caplog):
+    # given
+    order = order_with_lines
+    order.shipping_price_gross_amount += Decimal("1")
+    order.save(update_fields=["shipping_price_gross_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, lines_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order tax issue" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_log_order_with_incorrect_total(order_with_lines, caplog):
+    # given
+    order = order_with_lines
+    line = order.lines.first()
+    line.total_price_net_amount += Decimal("1")
+    line.save(update_fields=["total_price_net_amount"])
+
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, lines_info, logger)
+
+    # then
+    order_id = graphene.Node.to_global_id("Order", order.pk)
+    assert len(caplog.records) == 1
+    assert caplog.records[0].orderId == order_id
+    assert caplog.records[0].order_id == order_id
+    assert caplog.records[0].order
+    assert caplog.records[0].lines
+    error_message = caplog.records[0].message
+    assert "Order total does not match lines total and shipping" in error_message
+    assert f"Suspicious order: {order_id}. Issues detected:" in error_message
+
+
+def test_no_logs_for_correct_order(order_with_lines, checkout_info, caplog):
+    # given
+    order = order_with_lines
+    lines_info = [
+        OrderLineInfo(
+            line=line,
+            quantity=line.quantity,
+            variant=line.variant,
+            warehouse_pk=line.allocations.first().stock.warehouse.pk,
+        )
+        for line in order.lines.all()
+    ]
+
+    # when
+    log_suspicious_order_in_draft_order_flow(order, lines_info, logger)
+
+    # then
+    assert not caplog.records
