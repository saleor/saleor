# Generated by Django 4.2.20 on 2025-06-03 08:52

from django.db import migrations, transaction

# The batch of size 250 takes ~0.3
BATCH_SIZE = 250


def set_lines_count(apps, _schema_editor):
    Order = apps.get_model("order", "Order")
    qs = Order.objects.filter(lines_count__isnull=True).order_by("pk")
    for ids in queryset_in_batches(qs):
        orders = Order.objects.filter(id__in=ids).order_by("pk")
        with transaction.atomic():
            to_save = []
            _orders_lock = list(orders.select_for_update(of=(["self"])))
            for order in orders:
                order.lines_count = order.lines.count()
                to_save.append(order)
            Order.objects.bulk_update(to_save, ["lines_count"])


def queryset_in_batches(queryset):
    start_pk = 0
    while True:
        qs = queryset.filter(pk__gt=start_pk)[:BATCH_SIZE]
        pks = list(qs.values_list("pk", flat=True))
        if not pks:
            break
        yield pks
        start_pk = pks[-1]


class Migration(migrations.Migration):
    dependencies = [
        ("order", "0203_order_lines_count"),
    ]

    operations = [
        migrations.RunPython(
            set_lines_count,
            reverse_code=migrations.RunPython.noop,
        )
    ]
