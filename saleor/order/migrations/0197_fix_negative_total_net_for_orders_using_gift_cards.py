# Generated by Django 4.2.15 on 2025-07-02 11:39

import uuid
from decimal import Decimal

from django.db import migrations, transaction


def fix_negative_total_net_for_orders_using_gift_cards(apps, _schema_editor):
    Order = apps.get_model("order", "Order")
    # No memory usage tests were conducted here.
    # It's assumed that loading 500 identifiers to memory is not straining the memory
    # usage.

    BATCH_SIZE = 500
    start_pk = uuid.UUID("00000000-0000-0000-0000-000000000000")
    while True:
        with transaction.atomic():
            # Following select query has been tested on database with 4.2m actual orders, it took ~5s.
            order_pks = list(
                Order.objects.filter(
                    pk__gt=start_pk,
                    total_net_amount__lt=Decimal("0.00"),
                )
                .exclude(gift_cards=None)
                .order_by("pk")
                .select_for_update()
                .values_list("pk", flat=True)[:BATCH_SIZE]
            )

            if not order_pks:
                break

            Order.objects.filter(
                pk__in=order_pks,
            ).update(total_net_amount=Decimal("0.00"))

            start_pk = order_pks[-1]


class Migration(migrations.Migration):
    dependencies = [
        ("order", "0196_alter_fulfillment_shipping_refund_amount_and_more"),
    ]

    operations = [
        migrations.RunPython(
            fix_negative_total_net_for_orders_using_gift_cards,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
